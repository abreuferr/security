#: Title : Token
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : Uma série de informações de como trabalhar com eToken.
#: Options : None
#: Reference :

#################################################################
#
# TOKEN
#
#################################################################

#
# Instalação
#

# Arch Linux
#
$ yay -S opensc openct sac-core ccid pcsclite pcsc-tools pcsc-perl
$ sudo systemctl enable --now pcscd.service
$ sudo systemctl enable --now pcscd.socket

# Debian
#
$ sudo apt install libjbig0 libtiff5 fontconfig-config libfontconfig1 libwxbase3.0-0v5 libpcsclite1 libccid pcscd opensc libengine-pkcs11-openssl  gnupg-pkcs11-scd gnupg2

$ cd /tmp 
$ wget https://www.globalsign.com/en/safenet-drivers/USB/10.7/Safenet_Linux_Installer_DEB_x64.zip 
$ unzip Safenet_Linux_Installer_DEB_x64.zip 
$ sudo dpkg -i safenetauthenticationclient_10.7.77_amd64.deb 
$ sudo apt-get -f install

#
# Inicializar token
#

# Criando o Security Office (SO)
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --slot 0 --init-token --label hsm

# Crindo o User PIN
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --init-pin --login --slot 0

# Alterando o User PIN
#
$ pkcs11-tool -vv  --module /usr/lib/libeToken.so --change-pin

# Desbloquear o HSM
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --login-type so --so-pin=123456 --init-pin --new-pin=AAaa00--

# Visualizar o conteúdo do token
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login -O

# Login
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --test --login --pin AAaa00--

#################################################################
#
# CHAVE - Simétrica e Assimétrica
#
#################################################################

# Chave RSA 2048
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type RSA:2048 --id 1 --label abreuferr_rsa

# Chave EC SECP r1
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type EC:secp384r1 --id 2 --label abreuferr_ec1

# Chave EC Koblitz k1
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type EC:prime256v1 --id 3 --label abreuferr_k1

# Chave AES 128
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keygen --id 5 --key-type aes:16 --label abreuferr_aes128 --sensitive

# Chave AES 256
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keygen --id 4 --key-type aes:32 --label abreuferr_aes256 --sensitive

# Visualizar as chaves que estão armazenadas no token
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login -O

# Visualizar as chaves públicas.
#
$ ssh-keygen -D /usr/lib/libeToken.so

# Apagar objetos armazenados no token
#
# (cert, privkey, pubkey, secrkey, data)
#
$ pkcs11-tool -vv  --module /usr/lib/libeToken.so --login --delete-object --id 01 --type pubkey 

#################################################################
#
# Certificado Digital
#
#################################################################

#
# Arquivo de configuração do OpenSSL
#

$ cat engine.conf
  openssl_conf = openssl_init

  [openssl_init]
  engines = engine_section

  [engine_section]
  pkcs11 = pkcs11_section

  [pkcs11_section]
  engine_id = pkcs11
  MODULE_PATH = /usr/lib/libeToken.so
  init = 0

  [req]
  distinguished_name = req_distinguished_name
  [req_distinguished_name]

# Gerando o CSR utilizando a chave privada RSA que esta armazenada no HSM
#
# Utilizando o arquivo "engine.conf" veja o SLOT e o ID da chave privada 
# a utilizar, no caso, Slot 0 e ID 01
# 
$ openssl req -new -subj '/CN=abreuferr/' -sha256 -config engine.conf -engine pkcs11 -keyform engine -key 0:01 -out arquivo_certificado.csr

# Gerando o certificado auto-assinado
#
$ openssl req -x509 -engine pkcs11 -config engine.conf -keyform engine -new -key 0:01 -sha256 -days 3650 -out certificado_auto_assinado.pem -subj '/CN=abreuferr'

#
# Importar certificado para o HSM 
#

# Converter o arquivo PEM no formato DER
#
$ openssl x509 -outform der -in certificado_auto_assinado.pem -out certificado_auto_assinado.der

# Gravando o certificado no token
#
# Subir o certificado, importante que o ID seja o MESMO da chave pública 
#
$ pkcs11-tool --module /usr/lib/libeToken.so --login --write-object certificado_auto_assinado.der --type cert --id 01 --label "abreuferr"

# Exibir o certificado gravado no eToken
#
$ pkcs11-tool --module /usr/lib/libeToken.so --login --list-objects

Certificate Object; type = X.509 cert
  label:      abreuferr
  subject:    DN: CN=abreuferr
  ID:         01

# Apagar o certificado do eToken
#
$ pkcs11-tool --module /usr/lib/libeToken.so --login --delete-object --type cert --id 01

################################################################
#
# OPENVPN
#
#################################################################

# Gerando o par de chaves RSA
#
$ pkcs11-tool -vv --module /usr/lib/libeToken.so --login --keypairgen --key-type RSA:2048 --id 1 --label abreuferr_gmail_com

# Gerando o CSR utilizando a chave privada RSA que esta armazenada no HSM
#
# Utilizando o arquivo "engine.conf" veja o SLOT e o ID da chave privada 
# a utilizar, no caso, Slot 0 e ID 01 - o CSR deve ser assinado pela infra
# 
$ openssl req -new -subj '/CN=abreuferr_gmail_com/' -sha256 -config engine.conf -engine pkcs11 -keyform engine -key 0:01 -out arquivo_certificado.csr

# o arquivo "arquivo_certificado.csr" deve ser enviado para o responsavel o qual
# ira assinar o certificado.
#
# o responsavel ira enviar um e-mail com o certificado assinado. O certificado 
# deve ser salvo em um arquivo com a extensão .PEM, "certificado_assinado.pem"

# Converter de PEM para DER
#
$ openssl x509 -outform der -in certificado_assinado.pem -out certificado_assinado.der

# Importar o certificado assinado, DER, no HSM.
# 
# IMPORTANTE - o certificado deve ter o mesmo ID da chave pública/privada RSA 
# gerou o certificado.
#
$ pkcs11-tool --module /usr/lib/libeToken.so -l --write-object certificado_assinado.der --type cert --id 01 --label "abreuferr_gmail_com"

# Obtendo o "Serialized id"
#
$ openvpn --show-pkcs11-ids /usr/lib/libeToken.so

The following objects are available for use.
Each object shown below may be used as parameter to
--pkcs11-id option please remember to use single quote mark.

Certificate
       DN:             CN=cferreira
       Serial:         SERIAL
       Serialized id:  SERIALIZED_ID

# arquivo de configuração do OpenVPN
#
$ cat client.ovpn
client
dev tun
remote <IP_SERVER> 444 udp4
keepalive 10 120
nobind
persist-tun
persist-key
auth-nocache
verify-x509-name "<IP_SERVER>" name
remote-cert-tls server
tls-client
key-direction 1
route 10.66.0.0 255.255.0.0 172.16.20.1
<ca>
-----BEGIN CERTIFICATE-----
(...))
-----END CERTIFICATE-----
</ca>
pkcs11-providers /usr/lib/libeToken.so
pkcs11-id 'SERIALIZED_ID'
tls-version-min 1.1

################################################################
#
# OPENSSH
#
#################################################################

# configuração do cliente ssh
#
$ cat /etc/ssh/ssh_config
(...)
PKCS11Provider /usr/lib/libeToken.so

# obter a chave pública armazenada no eToken
#
# PS. utilizar chave de criptografia do tipo EC pois
# é um algoritmo de criptografia mais rápido no processo
# de criptografia/descriptografia
#
$ pkcs11-tool --module /usr/lib/libeTPkcs11.so --slot 0 --login --list-objects

# copiar a chave pública para o arquivo authorized_keys e
# esse arquivo deve ser copiado para o servidor ssh e
# deve ser copiado para o diretório .ssh
#
$ ssh-keygen -D /usr/lib/libeToken.so >> ~/.ssh/authorized_keys

# login no servidor ssh
#
$ ssh -I /usr/lib/libeToken.so cferreira@192.168.X.X

################################################################
#
# ASSINATURA
#
#################################################################

#
# Assinar e Verificar um arquivo utilizando chave RSA id 01 
#
# A informação a ser criptografada é inserida no HSM > Criptografada 
# dentro do HSM > exportada para o computador.
#

# Arquivo de teste
#
$ echo "19d512fc649e1668eb84741284ad95ec03f3225719a83e40389dbade4eabe5ed" > digest.txt
$ xxd -r -p digest.txt digest.bin

# Assinar digitalmente o conteúdo de um arquivo com a chave privada RSA e mecanismo RSA-PKCS
#
$ pkcs11-tool --module /usr/lib/libeToken.so --pin 12345 --login --sign -m RSA-PKCS --id 01 -i digest.bin -o signature.bin

# Exibir o arquivo assinado
#
$ base64 digest.bin.RSA-PKCS.sign

# Exportar a chave PUBLICA
#
$ pkcs11-tool --read-object --pin 12345 --id 01 --type pubkey --module /usr/lib/libeToken.so -o public-key.der

# Converter o arquivo do formato DER(binário) para o formato PEM(ascii)
# 
$ openssl rsa -inform DER -outform PEM -in public-key.der -pubin -out public-key.pem

#
# RSA-PKCS
#

# Verificar conteudo da assinatura assinado em RSA-PKCS
#
$ openssl rsautl -verify -inkey public-key.pem -in signature.bin -pubin -out verified.bin

# Convertendo os arquivos
#
$ xxd -p -c32 verified.bin verified.txt

# Comparando os arquivos
#
$ cat digest.txt verified.txt

# Assinar digitalmente o conteúdo de um arquivo com a chave privada RSA e mecanismo ECDSA-SHA384
#
$ pkcs11-tool --module /usr/lib/libeToken.so --pin 12345 --login --sign -m ECDSA-SHA384 --id 02 -i 244letras.txt -o 244letras.txt.ECDSA-SHA384.sign

################################################################
#
# CRIPTOGRAFIA
#
#################################################################

#
# Criptografar e Descriptografar um arquivo utilizando chave RSA id 01 
#
# O arquivo é criptografado fora do HSM pois é utilizado a chave pública
# para executar o processo. Já o processo de descriptografia ocorre dentro 
# do dentro do HSM pois a chave privada não pode ser exportada do HSM.
#

# Exportar a chave PUBLICA
#
$ pkcs11-tool --read-object --pin 12345 --id 01 --type pubkey --module /usr/lib/libeToken.so -o chave_publica.der

# Converter o arquivo com a chave pública do formato DER(binário) para o formato PEM(ascii)
# 
$ openssl rsa -inform DER -outform PEM  -in chave_publica.der -pubin -out chave_publica.pem

# Criptografando um arquivou tilizando a chave publica
#
$ openssl pkeyutl -encrypt -inkey chave_publica.pem -pubin -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256 -pkeyopt rsa_mgf1_md:sha256 -in 189letras.txt -out 189letras.txt.RSA-AOEP

# Decriptografando um arquivo utilizando a chave privada
#
# o processo de descriptografia ocorre dentro do HSM
#
$ pkcs11-tool --module /usr/lib/libeToken.so --pin 1234 --login --decrypt --id 01 -m RSA-PKCS-OAEP -i 189letras.txt.RSA-AOEP -o 189letras.txt.RSA-AOEP.verificado
$ pkcs11-tool --module /usr/lib/libeToken.so --pin 1234 --login --decrypt --id 01 -m RSA-PKCS-OAEP --hash-algorithm=sha256 -i 189letras.txt.RSA-AOEP -o 189letras.txt.RSA-AOEP.verificado